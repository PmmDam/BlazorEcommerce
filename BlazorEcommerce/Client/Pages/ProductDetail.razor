@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService


@if(product == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>
            
            @*Despegable para seleccionar un variant*@

            @if(product.Variants != null && product.Variants.Count > 1)
            {
                <div class="mb-3">
                    
                    <select class="form-select" @bind="currentTypeId">
                        @foreach(var variant in product.Variants)
                        {
                            <option value="@variant.ProductTypeId"> @variant.ProductType.Name</option>
                        }
                    </select>

                </div>
            }
            @*Comprobamos si el producto tiene un precio original mayor que el de la variante para renderizarlo o no*@
            @*Como posible refactor, sería interesante cachear el variant que devuelve GetSelectedVariant()*@
            @if(GetSelectedVariant() != null)
            {
                @if(GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        @GetSelectedVariant().OriginalPrice€
                    </h6>
                }

                <h4 class="price">
                    @GetSelectedVariant().Price€
                </h4>
            }

            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp; Añadir a la cesta
            </button>
        </div>

    </div>
}

@code {
    private Product? product = null;
    private string message = string.Empty;
    private int currentTypeId = 1;

    //Con este atributo especificamos que está variable es un parámetro que va en la propia URL
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Cargando producto...";
        var result = await ProductService.GetProductAsync(Id);

        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }

    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };
        await CartService.AddToCart(cartItem);
    }
}
